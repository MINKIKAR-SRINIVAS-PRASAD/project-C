#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Structure definitions
typedef struct {
    int patient_id;
    char name[50];
    int age;
    char gender[10];
    char contact[15];
    char address[100];
} Patient;

typedef struct {
    int doctor_id;
    char name[50];
    char specialization[50];
    char contact[15];
} Doctor;

typedef struct {
    int appointment_id;
    int patient_id;
    int doctor_id;
    char date[20];
    char time[10];
    char status[20];
} Appointment;

// Function prototypes
void add_patient(Patient *patients, int *patient_count);
void display_patients(Patient *patients, int patient_count);
void add_doctor(Doctor *doctors, int *doctor_count);
void display_doctors(Doctor *doctors, int doctor_count);
void schedule_appointment(Appointment *appointments, int *appointment_count, 
                          Patient *patients, int patient_count, 
                          Doctor *doctors, int doctor_count);
void display_appointments(Appointment *appointments, int appointment_count);

int main() {
    Patient patients[100];
    Doctor doctors[50];
    Appointment appointments[200];

int patient_count = 0;
int doctor_count = 0;
int appointment_count = 0;

int choice;

while(1) {
    // Menu system
    printf("\n--- Hospital Management System ---\n");
    printf("1. Add Patient\n");
    printf("2. Display Patients\n");
    printf("3. Add Doctor\n");
    printf("4. Display Doctors\n");
    printf("5. Schedule Appointment\n");
    printf("6. Display Appointments\n");
    printf("7. Exit\n");
    printf("Enter your choice: ");
    scanf("%d", &choice);
    
    switch(choice) {
        case 1:
            add_patient(patients, &patient_count);
            break;
        case 2:
            display_patients(patients, patient_count);
            break;
        case 3:
            add_doctor(doctors, &doctor_count);
            break;
        case 4:
            display_doctors(doctors, doctor_count);
            break;
        case 5:
            schedule_appointment(appointments, &appointment_count, 
                                 patients, patient_count, 
                                 doctors, doctor_count);
            break;
        case 6:
            display_appointments(appointments, appointment_count);
            break;
        case 7:
            printf("Exiting the system...\n");
            exit(0);
        default:
            printf("Invalid choice! Please try again.\n");
    }
}

return 0;
}

// Function implementations
void add_patient(Patient *patients, int *patient_count) {
    Patient new_patient;

printf("Enter Patient ID: ");
scanf("%d", &new_patient.patient_id);

printf("Enter Patient Name: ");
scanf(" [^\n]", new_patient.name);

printf("Enter Patient Age: ");
scanf("%d", &new_patient.age);

printf("Enter Patient Gender: ");
scanf(" [^\n]", new_patient.gender);

printf("Enter Patient Contact: ");
scanf(" [^\n]", new_patient.contact);

printf("Enter Patient Address: ");
scanf(" [^\n]", new_patient.address);

patients[*patient_count] = new_patient;
(*patient_count)++;

printf("Patient added successfully!\n");
}

void display_patients(Patient *patients, int patient_count) {
    if(patient_count == 0) {
        printf("No patients recorded.\n");
        return;
    }

printf("\n--- Patient List ---\n");
for(int i = 0; i < patient_count; i++) {
    printf("ID: %d\n", patients[i].patient_id);
    printf("Name: %s\n", patients[i].name);
    printf("Age: %d\n", patients[i].age);
    printf("Gender: %s\n", patients[i].gender);
    printf("Contact: %s\n", patients[i].contact);
    printf("Address: %s\n", patients[i].address);
    printf("------------------------\n");
}
}
